//package Ex07.공부;
//
//public class Array_ArrayList {

//    Array 랑 ArrayList 차이가 뭐야?
//
//    ChatGPT의 말:
//    ChatGPT
//    Array와 ArrayList는 둘 다 자바에서 여러 개의 값을 저장하기 위해
//    사용되는 데이터 구조이지만, 사용 방법과 기능에서 몇 가지 중요한 차이점이 있습니다.
//
//            1. 크기
//    Array (배열):
//    크기가 고정되어 있습니다. 한 번 크기를 정하면 변경할 수 없습니다.
//    배열을 생성할 때 크기를 지정해야 하며, 더 많은 요소를 추가할 수 없습니다.
//            ArrayList:
//    크기가 동적으로 변경됩니다. 필요에 따라 크기를 자동으로 확장하거나 축소합니다.
//    요소를 추가하거나 제거할 때마다 크기가 조정되므로 더 유연하게 사용할 수 있습니다.
//
//2. 자료형 제한
//
//    Array:
//    기본 데이터 타입(int, char, double 등)과 객체 타입(String, Integer, 사용자 정의 클래스 등) 모두 저장할 수 있습니다.
//    배열은 동일한 데이터 타입의 요소만 저장할 수 있습니다.
//
//    ArrayList:
//    객체 타입만 저장할 수 있습니다. 기본 데이터 타입을 저장하려면 해당 타입의 래퍼 클래스(Integer, Double, Character 등)를 사용해야 합니다.
//    제네릭을 사용하여 특정 타입만 저장하도록 제한할 수 있습니다.
//
//            3. 성능
//    Array:
//    메모리 효율이 높고, 배열 인덱스를 사용하여 빠르게 접근할 수 있습니다.
//    배열의 크기가 고정되어 있기 때문에 크기를 변경하는 작업이 없습니다.
//
//            ArrayList:
//    내부적으로 배열을 사용하여 데이터를 관리하지만, 크기 변경 시 새로운 배열을 생성하고 데이터를 복사해야 하므로 성능이 약간 떨어질 수 있습니다.
//    요소를 추가하거나 삭제할 때 크기 조정과 데이터 이동이 필요할 수 있어 배열보다 느릴 수 있습니다.
//
//4. 기능
//    Array:
//    기본적인 요소 접근 및 변경 기능만 지원하며, 추가적인 기능은 제공되지 않습니다.
//    길이를 알고 싶으면 array.length를 사용합니다.
//
//    ArrayList:
//    요소 추가, 삭제, 검색, 정렬 등의 다양한 메서드를 제공합니다 (add(), remove(), get(), set() 등).
//    크기는 arrayList.size() 메서드를 통해 얻을 수 있습니다.
//
//            5. 초기화 방법
//
//    Array:
//    배열은 리터럴 또는 new 키워드를 사용하여 초기화할 수 있습니다.
//            java
//    코드 복사
//    int[] numbers = {1, 2, 3, 4}; // 리터럴 사용
//    int[] numbers = new int[5];   // 크기 지정
//
//    ArrayList:
//    ArrayList는 new 키워드를 사용하여 초기화해야 합니다.
//    java
//    코드 복사
//    ArrayList<Integer> list = new ArrayList<>(); // ArrayList 초기화
//list.add(1); // 요소 추가
//
//
//6. 사용 예시
//    java
//    코드 복사
//    // Array 예시
//    int[] array = new int[3];
//    array[0] = 1;
//    array[1] = 2;
//    array[2] = 3;
//
//    // ArrayList 예시
//    ArrayList<Integer> arrayList = new ArrayList<>();
//arrayList.add(1);
//arrayList.add(2);
//arrayList.add(3);
//arrayList.add(4); // ArrayList는 크기 제한이 없음, 계속 추가 가능
//
//
//    차이점 요약
//
//    특징  	            \         Array	                                           ArrayList
//    크기	                \          고정 크기	                                        동적 크기
//    데이터 타입	        \   기본 타입과 객체 타입 모두 가능	                        객체 타입만 저장 가능
//    성능	                \    메모리 효율적, 빠름	                              유연하지만, 크기 조정 시 성능 저하 가능
//    기능	                \ 제한적 (기본적인 접근 및 수정만 가능)              	       다양한 메서드를 제공
//    초기화	            \     리터럴 또는 new 사용	                                   new ArrayList<>() 사용
//    기본 데이터 타입 저장	\           가능	                                         래퍼 클래스 사용 필요 (Integer 등)
//
//
//    Array는 메모리 사용과 접근 속도 측면에서 유리하며, 고정 크기 데이터를 다룰 때 유용합니다.
//    반면, ArrayList는 크기가 변하는 데이터를 쉽게 다룰 수 있어 유연성과 편리함을 제공합니다.
//    상황에 따라 적절한 구조를 선택하여 사용하는 것이 좋습니다.
//
//
//
//


//
//}
