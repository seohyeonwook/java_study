//package Ex07.공부;
//
//public class Method_Constructor {
    //메서드와 생성자의 다른점은 뭐야?

//ChatGPT의 말:
//ChatGPT
//메서드(Method)와 생성자(Constructor)는 둘 다 클래스 내에서 정의되지만,
// 역할과 동작 방식이 다릅니다. 다음은 메서드와 생성자의 주요 차이점입니다:
//
//        1. 역할
//메서드: 특정 작업을 수행하기 위해 사용됩니다. 메서드는 클래스의 동작(기능)을 정의하며, 데이터를 처리하거나 반환 값을 줄 수 있습니다.
//생성자: 객체가 생성될 때 호출되며, 객체의 초기 상태를 설정하는 데 사용됩니다. 주로 객체의 필드를 초기화하는 역할을 합니다.

//        2. 이름
//메서드: 클래스의 이름과 다를 수 있으며, 개발자가 원하는 이름을 자유롭게 설정할 수 있습니다.
//생성자: 클래스의 이름과 동일해야 하며, 생성자의 이름은 클래스 이름과 완전히 일치해야 합니다.

//        3. 반환 타입
//메서드: 반환 타입이 있습니다. 작업을 완료한 후 특정 타입의 값을 반환할 수 있습니다(int, String, void 등).
//생성자: 반환 타입이 없습니다. 생성자는 객체를 생성하는 특별한 메서드이기 때문에 반환 타입을 지정하지 않습니다.

//        4. 호출 방법
//메서드: 객체가 생성된 후에 명시적으로 호출해야 합니다. 예를 들어, myObject.myMethod()와 같이 호출됩니다.
//생성자: 객체가 생성될 때 자동으로 호출됩니다. 생성자는 new 키워드를 사용하여 객체를 생성할 때 자동으로 실행됩니다.
//       예를 들어, MyClass obj = new MyClass();에서 생성자가 호출됩니다.

//        5. 오버로딩
//메서드: 메서드는 매개변수의 개수나 타입이 다르면 같은 이름으로 여러 번 정의할 수 있습니다(오버로딩).
//생성자: 생성자도 오버로딩이 가능하며, 다양한 매개변수를 가진 여러 생성자를 정의할 수 있습니다.

//        6. 기본 제공 여부
//메서드: 기본 메서드는 제공되지 않으며, 개발자가 직접 정의해야 합니다.
//생성자: 클래스에 생성자가 하나도 정의되어 있지 않으면,
//       컴파일러가 자동으로 기본 생성자(매개변수가 없는 생성자)를 제공합니다.

//        7. 예시
//메서드:
//
//class MyClass {
//    int add(int a, int b) {  // 메서드
//        return a + b;
//    }
//}

//생성자:
//
//class MyClass {
//    int x;
//
//    MyClass() {  // 생성자
//        x = 10;  // 객체 생성 시 x를 초기화
//    }
//}

//사용:
//

//public class Main {
//    public static void main(String[] args) {
//        MyClass obj = new MyClass();  // 생성자 호출
//        int result = obj.add(5, 3);   // 메서드 호출
//    }
//}

//이처럼 메서드와 생성자는 사용 목적과 동작 방식에서 큰 차이가 있습니다.
// 생성자는 객체 생성 시 초기화 작업을 담당하며,
// 메서드는 객체 생성 후 해당 객체가 수행할 작업을 정의합니다.
//}
